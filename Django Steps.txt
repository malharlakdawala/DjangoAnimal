create a new folder, open pycharm on that folder, create new project

#Django Intallation

python -m venv env	  			#initialise a virtual environment
env\Scripts\activate 				#activate environment (env should be seen)
pip install django 				#install django
python -m pip freeze > requirements.txt 	#for requirements
django-admin startproject <projectname> 	#setup django project
cd <projectname>   				#run startapp inside projrect folder
python manage.py startapp <appname> 	 	#start django app, run this inside project name folder
python manage.py runserver			#check if django is succesfully installed

Inside the app folder, create a file called urls.py

#directory structure
projectname/
    manage.py
    db.sqlite3
    projectname/
        __init__.py
        settings.py
        urls.py
        wsgi.py
    appname/
        migrations/
            __init__.py
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        urls.py
        views.py

To include this app in your project, add your app to the project's settings.py file by adding its name to the INSTALLED_APPS list:
INSTALLED_APPS = [
	'appname',
	# ...
]

#Creating a view
In <appname>/urls.py

from django.urls import path
from . import views

urlpatterns = [
	path('',views.homepage,name='homepage')
    path('people/', views.people_view),
    path('people/<int:person_id>/', views.person_view, name='single_person_show')
]

#in <projectname>/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls'))
]

In <appname>/views.py
from django.shortcuts import render
from .models import Person
# Create your views here.

def person_view(request, person_id):
    peep = Person.objects.get(id=person_id)
    return render(request, 'person.html', {'person': peep})

def index(request):
	return HttpResponse("Hello, World!")



#Creating a template (html files)
Create a new folder named 'templates' and 'static' inside app directory
appname/
   templates/
      index.html
	  person.html
   static/
      style.css
      script.js
	  

Create Models (databases)

#create databse in pgsql <databse_name>
#pip install psycopg2

in settings.py, do below on database section

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '<databse_name>',
        'USER': 'postgres',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


from django.db import models

class Musician(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=100)
	
	def __str__(self):
		return self.first_name
#this function returns first_name whenever it is called

class Album(models.Model):
    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    num_stars = models.IntegerField()
	
	def __int__(self):
		return self.id
	
	
#to affix the changes in the table
python manage.py makemigrations
python manage.py migrate
#check psql database if tables and columns are visible



#OneToOneField

class Person(Model):
    name = models.CharField(max_length=50)
    
class Passport(Model):
    country = models.CharField(max_length=50)
    person = models.OneToOneField(Person, on_delete=models.CASCADE)
	
	
p = Person.objects.create(name='Rick')
passport = Passport.objects.create(person=p, country='usa')

#Many to Many

class Hobby(Model):
    name = models.CharField(max_length=50)
    
class Person(Model):
    name = models.CharField(max_length=50)
    hobbies = models.ManyToManyField(Hobby)


h = Hobby.objects.create(name='gaming')
p = Person.objects.get(id=1)
p.hobbies.add(h) # add specific hobbies
p.hobbies.remove(h) # remove specific hobbies
p.hobbies.clear() # removes all previous hobbies
p.hobbies.set([h]) # removes all previous hobbies and sets the list of hobbies provided

h.person_set.all() # all people with this hobby

Go to the file appname/admin.py and add the following code :

from django.contrib import admin
from .models import Person #import the Person model

# Register your models here.
admin.site.register(Person)

python manage.py shell  #django shell, to insert/view data
>>> from name_of_app.models import model1

>>> x = name_of_model(field1=value, field2=value, ect..)
# Save the object into the database. You have to call save() explicitly.
>>> x.save()

# Access model field values via Python attributes.
>>> x.field1
>>> x.field2

>>> name_of_model.objects.filter(field1=value, field2=value)

>>> name_of_model.objects.get(field1=value)
>>> name_of_model.objects.order_by("field1")
>>> name_of_model.objects.filter(field1=value).order_by("field1")
>>> name_of_model.objects.filter(id=1).update(field1=value)
>>> name_of_model.objects.all().delete()

#for foreign key adding, use _id for inserting. if foreign key join with pet, then:
>>> p = Person(first_name="John",  last_name="Doe", birth_date=date(1996,5,23), has_pet=True, pet_id=2) 
>>> p.save()


#Admin Page
python manage.py createsuperuser

To add a model to the Admin page include the following in admin.py:
from django.contrib import admin
from .models import Author, Book

admin.site.register(Author)
admin.site.register(Book)




	

#Template pages


Troubleshoot
TemplateDoesNotExist at /
add line in 'DIRS' and do, 'import os'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },



Login Logout
#in settings.py page
LOGOUT_REDIRECT_URL = 'homepage'
LOGIN_REDIRECT_URL = 'homepage'

app/urls.py
from django.urls import path
from . import views
from django.contrib.auth.views import LoginView, LogoutView


urlpatterns = [
    path('', views.homepage, name='homepage'),
    path('login/', LoginView.as_view(template_name='accounts/login.html'), name='login'),
    path('logout/', LogoutView.as_view(), name='logout'),
    path('profile/', views.UserUpdateView.as_view(), name='my_profile'),
    path('signup/', views.SignUpView.as_view(), name='signup'),

]


apps/forms.py
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import Profile


class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'first_name']

class ProfileCreateForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['phone', 'profession']


app.models.py
from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    phone = models.CharField(max_length=100)
    profession = models.CharField(max_length=100)
    image = models.ImageField(null=True, upload_to='profile_pics/')

    def pic(self):
        if self.image:
            return self.image.url
        else:
            return 'https://bootdey.com/img/Content/avatar/avatar6.png'


app/views.py

from django.shortcuts import render
from .forms import UserRegisterForm, ProfileCreateForm
from django.views.generic.edit import CreateView, UpdateView
from django.urls import reverse_lazy
from django.contrib.messages.views import SuccessMessageMixin
from django.contrib.auth.models import User
from .models import Profile


# Create your views here.
def homepage(request):
    return render(request, 'partials/base.html')


class SignUpView(SuccessMessageMixin, CreateView):
    template_name = 'accounts/signup.html'
    success_url = reverse_lazy('homepage')
    form_class = UserRegisterForm
    success_message = "Your profile was created successfully"

    # def get_context_data(self, **kwargs):
    #     context = super().get_context_data()
    #     context['profile_form'] = UserRegisterForm(self.request.POST or None)
    #     print(context)
    #     return context
    # used to enter a new datapoint while entering

    # def form_valid(self, form):
    #     signup_form = UserRegisterForm(self.request.POST)
    #     if signup_form.is_valid():
    #         self.object = form.save()
    #         profile = signup_form.save(commit=False)
    #         profile.user = self.object
    #         profile.save()
    #         return super().form_valid(form)
    #     else:
    #         return self.form_invalid(form)
    #

    # def form_invalid(self, form):
    #     # same as above
    #     print('form is invalid')
    #     return super().form_invalid(form)


class UserUpdateView(UpdateView):
    model = User
    fields = ['first_name', 'last_name', 'email']
    template_name = 'accounts/profile.html'
    success_url = reverse_lazy('homepage')

    def get_object(self, queryset=None):
        # this will nullify the need for a pk in the url, by default get_object is the function in
        # detail views that requires a pk or slug
        return self.request.user

    def get_context_data(self, **kwargs):
        context = super().get_context_data()
        if Profile.objects.filter(user=self.request.user).exists():
            context['profile_form'] = ProfileCreateForm(self.request.POST or None, instance=self.request.user.profile)
            print(context)
            # update form
        else:
            context['profile_form'] = ProfileCreateForm(self.request.POST or None)
            print(context)
            # create form
        return context

    def form_valid(self, form):
        if Profile.objects.filter(user=self.request.user).exists():
            profile_form = ProfileCreateForm(self.request.POST, instance=self.request.user.profile)
        else:
            profile_form = ProfileCreateForm(self.request.POST)
        if profile_form.is_valid():
            self.object = form.save()
            profile = profile_form.save(commit=False)
            profile.user = self.object
            profile.save()
            return super().form_valid(form)
        else:
            return self.form_invalid(form)


DO 
python manage.py makemigrations
python manage.py migrate
for commiting changes

Django bootstrap
https://django-bootstrap-v5.readthedocs.io/en/latest/
pip install django-bootstrap-v5
got it settings, add appname, 'bootstrap5'

login.html
  {% bootstrap_form form %}

signup.html
  {% bootstrap_form form %}

profile.html
  {% bootstrap_form form %}
  {% bootstrap_form profile_form %}

navbar.html
{% if user.is_authenticated %}
<li class="nav-item">
	<a href="{% url 'my_profile' %}" class="nav-link">Hello {{user.username}}</a></li>
<li><a href="{% url 'logout' %}" class="nav-link active">Logout</a></li>
{% else %}
<li class="nav-item">
	<a href="{% url 'login' %}" class="nav-link ">Login</a>
</li>
{%endif%}

python manage.py inspectdb > models.py #import existing postgresql database to django